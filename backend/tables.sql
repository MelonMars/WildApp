create table public.posts (
  id bigserial not null,
  username text not null default 'anonymous'::text,
  challenge text not null,
  category text not null,
  photo text null,
  caption text null,
  likes integer null default 0,
  completed_at timestamp with time zone not null,
  timestamp timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  is_featured boolean null default false,
  is_verified boolean null default false,
  tags text[] null,
  latitude double precision null,
  longitude double precision null,
  owner uuid null,
  users_who_liked uuid[] null,
  comments jsonb null default '[]'::jsonb,
  constraint posts_pkey primary key (id)
) TABLESPACE pg_default;

create table public.daily_challenges (
  id serial not null,
  name text not null,
  category text null,
  challenge_day date not null,
  created_at timestamp with time zone null default CURRENT_TIMESTAMP,
  finishes bigint null default '0'::bigint,
  constraint daily_challenges_pkey primary key (id)
) TABLESPACE pg_default;

create table public.achievements (
  id uuid not null default gen_random_uuid (),
  title text not null,
  description text null,
  icon text null,
  category text null,
  difficulty text not null,
  created_at timestamp without time zone null default now(),
  kind text not null,
  target integer not null,
  constraint achievements_pkey primary key (id)
) TABLESPACE pg_default;

create table public.challenges (
  id serial not null,
  name text not null,
  category text not null,
  description text null,
  difficulty text null default 'medium'::text,
  created_at timestamp with time zone null default now(),
  is_active boolean null default true,
  finishes bigint null default '0'::bigint,
  local boolean null default false,
  latitude double precision null,
  longitude double precision null,
  constraint challenges_pkey primary key (id),
  constraint challenges_category_check check (
    (
      category = any (
        array[
          'social'::text,
          'creative'::text,
          'adventure'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create table public.daily_challenges (
  id serial not null,
  name text not null,
  category text null,
  challenge_day date not null,
  created_at timestamp with time zone null default CURRENT_TIMESTAMP,
  finishes bigint null default '0'::bigint,
  constraint daily_challenges_pkey primary key (id)
) TABLESPACE pg_default;

create table public.friendships (
  id uuid not null default gen_random_uuid (),
  requester_id uuid not null default gen_random_uuid (),
  addressee_id uuid not null default gen_random_uuid (),
  status text not null default 'CHECK (status IN (''pending'', ''accepted'', ''declined''))'::text,
  created_at timestamp without time zone not null default now(),
  updated_at timestamp without time zone null default now(),
  constraint friendships_pkey primary key (id),
  constraint fk_friendships_addressee foreign KEY (addressee_id) references users (id),
  constraint fk_friendships_requester foreign KEY (requester_id) references users (id)
) TABLESPACE pg_default;

create table public.invites (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  sender uuid null default gen_random_uuid (),
  pending_participants uuid[] null,
  participants uuid[] null,
  challenge_id bigint null,
  constraint invites_pkey primary key (id),
  constraint invites_sender_fkey foreign KEY (sender) references users (id)
) TABLESPACE pg_default;

create table public.levels (
  id uuid not null default gen_random_uuid (),
  level_number integer not null,
  post_threshold integer not null,
  constraint levels_pkey primary key (id),
  constraint levels_level_number_key unique (level_number),
  constraint levels_level_number_check check ((level_number > 0)),
  constraint levels_post_threshold_check check ((post_threshold >= 0))
) TABLESPACE pg_default;

create table public.newchallengepost (
  id uuid not null default gen_random_uuid (),
  username text not null,
  challenge_name text not null,
  category text not null,
  proof_photo text null,
  caption text null,
  completed_at timestamp with time zone not null,
  submitted_at timestamp with time zone null default now(),
  status text null default 'pending'::text,
  is_user_generated boolean null default true,
  review_notes text null,
  reviewed_by text null,
  reviewed_at timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  local boolean null default false,
  latitude double precision null,
  longitude double precision null,
  owner uuid null,
  constraint newchallengepost_pkey primary key (id),
  constraint newchallengepost_status_check check (
    (
      status = any (
        array[
          'pending'::text,
          'approved'::text,
          'rejected'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create table public.user_achievements (
  user_id uuid not null,
  achievement_id uuid not null,
  unlocked_at timestamp without time zone null default now(),
  constraint user_achievements_pkey primary key (user_id, achievement_id),
  constraint user_achievements_achievement_id_fkey foreign KEY (achievement_id) references achievements (id) on delete CASCADE,
  constraint user_achievements_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.users (
  email text not null,
  streak integer null default 0,
  posts bigint[] null,
  name text null,
  id uuid not null,
  created_at date null,
  streak_last_updated date null,
  achievements uuid[] null,
  level integer not null default 0,
  profile_picture text null,
  challenges_created integer null,
  liked_posts bigint[] null,
  commented_posts bigint[] null,
  constraint users_pkey primary key (id),
  constraint users_email_key unique (email)
) TABLESPACE pg_default;

create table public.leaderboards (
  id uuid not null default gen_random_uuid(),
  leaderboard_type text not null,
  category text null,
  user_id uuid not null,
  username text not null,
  score integer not null,
  rank_position integer not null,
  updated_at timestamp with time zone not null default now(),
  constraint leaderboards_pkey primary key (id),
  constraint leaderboards_user_id_fkey foreign key (user_id) references users (id) on delete cascade,
  constraint leaderboards_type_check check (    
    leaderboard_type = any (
      array[
        'achievements'::text,
        'challenges_overall'::text,
        'challenges_social'::text,
        'challenges_creative'::text,     
        'challenges_adventure'::text,
        'streaks'::text
      ]
    )
  )
) tablespace pg_default;